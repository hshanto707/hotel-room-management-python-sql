[
    {
        "label": "UserModel",
        "importPath": "app.user.user_model",
        "description": "app.user.user_model",
        "isExtraImport": true,
        "detail": "app.user.user_model",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "font",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "AuthController",
        "importPath": "app.auth.auth_controller",
        "description": "app.auth.auth_controller",
        "isExtraImport": true,
        "detail": "app.auth.auth_controller",
        "documentation": {}
    },
    {
        "label": "AuthController",
        "importPath": "app.auth.auth_controller",
        "description": "app.auth.auth_controller",
        "isExtraImport": true,
        "detail": "app.auth.auth_controller",
        "documentation": {}
    },
    {
        "label": "PRIMARY_COLOR",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SECONDARY_COLOR",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "PRIMARY_COLOR",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SECONDARY_COLOR",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "PRIMARY_COLOR",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SECONDARY_COLOR",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "APP_NAME",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "CustomerModel",
        "importPath": "app.customer.customer_model",
        "description": "app.customer.customer_model",
        "isExtraImport": true,
        "detail": "app.customer.customer_model",
        "documentation": {}
    },
    {
        "label": "pymysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymysql",
        "description": "pymysql",
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "pymysql.cursors",
        "description": "pymysql.cursors",
        "isExtraImport": true,
        "detail": "pymysql.cursors",
        "documentation": {}
    },
    {
        "label": "DictCursor",
        "importPath": "pymysql.cursors",
        "description": "pymysql.cursors",
        "isExtraImport": true,
        "detail": "pymysql.cursors",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Database",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "CustomerController",
        "importPath": "app.customer.customer_controller",
        "description": "app.customer.customer_controller",
        "isExtraImport": true,
        "detail": "app.customer.customer_controller",
        "documentation": {}
    },
    {
        "label": "ProfileView",
        "importPath": "app.user.profile_view",
        "description": "app.user.profile_view",
        "isExtraImport": true,
        "detail": "app.user.profile_view",
        "documentation": {}
    },
    {
        "label": "RoomModel",
        "importPath": "app.room.room_model",
        "description": "app.room.room_model",
        "isExtraImport": true,
        "detail": "app.room.room_model",
        "documentation": {}
    },
    {
        "label": "RoomController",
        "importPath": "app.room.room_controller",
        "description": "app.room.room_controller",
        "isExtraImport": true,
        "detail": "app.room.room_controller",
        "documentation": {}
    },
    {
        "label": "RoomController",
        "importPath": "app.room.room_controller",
        "description": "app.room.room_controller",
        "isExtraImport": true,
        "detail": "app.room.room_controller",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "app.auth.login_view",
        "description": "app.auth.login_view",
        "isExtraImport": true,
        "detail": "app.auth.login_view",
        "documentation": {}
    },
    {
        "label": "DashboardView",
        "importPath": "app.dashboard.dashboard_view",
        "description": "app.dashboard.dashboard_view",
        "isExtraImport": true,
        "detail": "app.dashboard.dashboard_view",
        "documentation": {}
    },
    {
        "label": "RegistrationView",
        "importPath": "app.auth.registration_view",
        "description": "app.auth.registration_view",
        "isExtraImport": true,
        "detail": "app.auth.registration_view",
        "documentation": {}
    },
    {
        "label": "AuthController",
        "kind": 6,
        "importPath": "app.auth.auth_controller",
        "description": "app.auth.auth_controller",
        "peekOfCode": "class AuthController:\n    def __init__(self):\n        self.user_model = UserModel()\n    def login(self, email, password):\n        # Check if email is valid\n        if not re.match(r\"[^@]+@gmail\\.com$\", email):\n            raise ValueError(\"Invalid email. Must be a valid @gmail.com address\")\n        if len(password) < 8:\n            raise ValueError(\"Password must be at least 8 characters long\")\n        return self.user_model.authenticate_user(email, password)",
        "detail": "app.auth.auth_controller",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "app.auth.login_view",
        "description": "app.auth.login_view",
        "peekOfCode": "class LoginView:\n    def __init__(self, root, switch_to_registration, switch_to_dashboard):\n        self.root = root\n        self.auth_controller = AuthController()\n        self.switch_to_registration = switch_to_registration\n        self.switch_to_dashboard = switch_to_dashboard\n        self.root.title(\"Login\")\n        self.root.geometry(\"1400x768\")\n        # Main container frame for the split design\n        container = tk.Frame(root, bg=SECONDARY_COLOR)",
        "detail": "app.auth.login_view",
        "documentation": {}
    },
    {
        "label": "RegistrationView",
        "kind": 6,
        "importPath": "app.auth.registration_view",
        "description": "app.auth.registration_view",
        "peekOfCode": "class RegistrationView:\n    def __init__(self, root, switch_to_login):\n        self.root = root\n        self.auth_controller = AuthController()\n        self.switch_to_login = switch_to_login\n        self.root.title(\"Registration\")\n        self.root.geometry(\"1400x768\")\n        # Main container frame for split design\n        container = tk.Frame(root, bg=SECONDARY_COLOR)\n        container.pack(fill=\"both\", expand=True)",
        "detail": "app.auth.registration_view",
        "documentation": {}
    },
    {
        "label": "BillingView",
        "kind": 6,
        "importPath": "app.billing.billing_view",
        "description": "app.billing.billing_view",
        "peekOfCode": "class BillingView:\n    def __init__(self, parent, primary_color, secondary_color):\n        self.frame = tk.Frame(parent, bg=secondary_color)\n        self.frame.pack(fill=\"both\", expand=True)\n        tk.Label(\n            self.frame, text=\"Billing Management Section\", bg=secondary_color, \n            fg=primary_color, font=(\"Helvetica\", 18)\n        ).pack(pady=20)",
        "detail": "app.billing.billing_view",
        "documentation": {}
    },
    {
        "label": "CustomerController",
        "kind": 6,
        "importPath": "app.customer.customer_controller",
        "description": "app.customer.customer_controller",
        "peekOfCode": "class CustomerController:\n    def __init__(self, view):\n        self.model = CustomerModel()\n        self.view = view\n    def add_customer(self, name, email, phone, address):\n        try:\n            self.model.create_customer(name, email, phone, address)\n            self.refresh_customer_list()\n        except ValueError as e:\n            messagebox.showerror(\"Error\", str(e))",
        "detail": "app.customer.customer_controller",
        "documentation": {}
    },
    {
        "label": "CustomerModel",
        "kind": 6,
        "importPath": "app.customer.customer_model",
        "description": "app.customer.customer_model",
        "peekOfCode": "class CustomerModel:\n    def __init__(self):\n        self.conn = Database.connect()\n        if self.conn is None:\n            raise Exception(\"Failed to connect to the database\")\n        self.cursor = self.conn.cursor(DictCursor)\n    def create_customer(self, name, email, phone, address, created_by=1):\n        check_query = \"SELECT COUNT(*) as count FROM customers WHERE email = %s\"\n        self.cursor.execute(check_query, (email,))\n        result = self.cursor.fetchone()",
        "detail": "app.customer.customer_model",
        "documentation": {}
    },
    {
        "label": "CustomersView",
        "kind": 6,
        "importPath": "app.customer.customer_view",
        "description": "app.customer.customer_view",
        "peekOfCode": "class CustomersView:\n    def __init__(self, parent, primary_color, secondary_color):\n        self.primary_color = primary_color\n        self.secondary_color = secondary_color\n        self.is_edit_mode = False\n        self.current_customer_id = None\n        self.controller = CustomerController(self)\n        # Main Frame\n        self.frame = tk.Frame(parent, bg=secondary_color)\n        self.frame.pack(fill=\"both\", expand=True)",
        "detail": "app.customer.customer_view",
        "documentation": {}
    },
    {
        "label": "DashboardView",
        "kind": 6,
        "importPath": "app.dashboard.dashboard_view",
        "description": "app.dashboard.dashboard_view",
        "peekOfCode": "class DashboardView:\n    def __init__(self, root, switch_to_login):\n        self.root = root\n        self.switch_to_login = switch_to_login\n        # Configure main window\n        self.root.title(APP_NAME)\n        self.root.geometry(\"1400x768\")\n        # Main Frame\n        main_frame = tk.Frame(self.root, bg=SECONDARY_COLOR)\n        main_frame.pack(fill=\"both\", expand=True)",
        "detail": "app.dashboard.dashboard_view",
        "documentation": {}
    },
    {
        "label": "ReservationsView",
        "kind": 6,
        "importPath": "app.reservation.reservation_view",
        "description": "app.reservation.reservation_view",
        "peekOfCode": "class ReservationsView:\n    def __init__(self, parent, primary_color, secondary_color):\n        self.frame = tk.Frame(parent, bg=secondary_color)\n        self.frame.pack(fill=\"both\", expand=True)\n        tk.Label(\n            self.frame, text=\"Billing Management Section\", bg=secondary_color, \n            fg=primary_color, font=(\"Helvetica\", 18)\n        ).pack(pady=20)",
        "detail": "app.reservation.reservation_view",
        "documentation": {}
    },
    {
        "label": "RoomController",
        "kind": 6,
        "importPath": "app.room.room_controller",
        "description": "app.room.room_controller",
        "peekOfCode": "class RoomController:\n    def __init__(self, view):\n        self.model = RoomModel()\n        self.view = view\n    def add_room(self, room_no, room_type, price, status):\n        try:\n            self.model.create_room(room_no, room_type, price, status)\n            self.refresh_room_list()\n        except ValueError as e:\n            messagebox.showerror(\"Error\", str(e))",
        "detail": "app.room.room_controller",
        "documentation": {}
    },
    {
        "label": "RoomModel",
        "kind": 6,
        "importPath": "app.room.room_model",
        "description": "app.room.room_model",
        "peekOfCode": "class RoomModel:\n    def __init__(self):\n        self.conn = Database.connect()\n        if self.conn is None:\n            raise Exception(\"Failed to connect to the database\")\n        # Use DictCursor to get results as dictionaries\n        self.cursor = self.conn.cursor(DictCursor)\n    def create_room(self, room_no, room_type, price, status, created_by=1):\n        # Check for duplicate room number\n        check_query = \"SELECT COUNT(*) as count FROM rooms WHERE roomNo = %s\"",
        "detail": "app.room.room_model",
        "documentation": {}
    },
    {
        "label": "RoomsView",
        "kind": 6,
        "importPath": "app.room.room_view",
        "description": "app.room.room_view",
        "peekOfCode": "class RoomsView:\n    def __init__(self, parent, primary_color, secondary_color):\n        self.primary_color = primary_color\n        self.secondary_color = secondary_color\n        self.is_edit_mode = False  # Track whether we're in \"edit\" mode\n        self.current_room_id = None  # Track room being edited\n        # Initialize the controller with a reference to self\n        self.controller = RoomController(self)\n        # Main Frame\n        self.frame = tk.Frame(parent, bg=secondary_color)",
        "detail": "app.room.room_view",
        "documentation": {}
    },
    {
        "label": "ProfileView",
        "kind": 6,
        "importPath": "app.user.profile_view",
        "description": "app.user.profile_view",
        "peekOfCode": "class ProfileView:\n    def __init__(self, parent, primary_color, secondary_color):\n        self.primary_color = primary_color\n        self.secondary_color = secondary_color\n        self.is_edit_mode = False  # Track whether we're in \"edit\" mode\n        self.current_room_id = None  # Track room being edited\n        # Initialize the controller with a reference to self\n        self.controller = RoomController(self)\n        # Main Frame\n        self.frame = tk.Frame(parent, bg=secondary_color)",
        "detail": "app.user.profile_view",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "app.user.user_model",
        "description": "app.user.user_model",
        "peekOfCode": "class UserModel:\n    def __init__(self):\n        self.db = Database()\n    def register_user(self, name, email, password):\n        connection = self.db.connect()\n        cursor = connection.cursor()\n        # Check if email already exists\n        check_query = \"SELECT id FROM users WHERE email = %s\"\n        cursor.execute(check_query, (email,))\n        if cursor.fetchone() is not None:",
        "detail": "app.user.user_model",
        "documentation": {}
    },
    {
        "label": "PRIMARY_COLOR",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "PRIMARY_COLOR = \"#3B1E54\"\nSECONDARY_COLOR = \"#EEEEEE\"\n# Other configuration settings\nAPP_NAME = \"Hotel Room Management System\"",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "SECONDARY_COLOR",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "SECONDARY_COLOR = \"#EEEEEE\"\n# Other configuration settings\nAPP_NAME = \"Hotel Room Management System\"",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "APP_NAME",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "APP_NAME = \"Hotel Room Management System\"",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "class Database:\n  @staticmethod\n  def connect():\n    try:\n      connection = pymysql.connect(\n        host=\"localhost\",\n        user=\"root\",\n        password=\"\",\n        database=\"hotel_room_management\",\n        port=3306",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class App:\n    def __init__(self, root):\n        self.root = root\n        # Main Code\n        # self.show_login()\n        # Debug Purpose start\n        self.show_dashboard()\n        # Debug Purpose end\n    def show_login(self):\n        # Clear the root frame for new view",
        "detail": "main",
        "documentation": {}
    }
]